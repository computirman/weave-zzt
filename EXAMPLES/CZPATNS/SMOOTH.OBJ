@INPUT
' static pages
' spacing and centering guide: (copy and paste. Width 50 columns.)
'                 xwvutsrqponmlkjihgfedcbaXXabcdefghijklmnopqrstuvwx
#end
:touch
#zap touch
#set array
#set obj4 15
#put under i 232 text 3 0
#pset i char 31
#shove i at 5 25
#change empty black solid
#step msgtxt by 0 -7
UP/DOWN TO VIEW PAGES, SPACE TO EXIT.
:z
#run :pg^


#put at 5 20 30 text 3 0
#put at 5 21 30 text 3 0
#put at 56 20 30 text 3 0
#put at 56 21 30 text 3 0
#put at 56 24 31 text 3 0
#put at 56 25 31 text 3 0
#put n 31 text 3 0
#color i 3 0
/i#restore up
#restore down
#restore space
#restore left
#restore right
#end

'up

#put at 5 20 30 text 11 0
#put at 5 21 30 text 11 0
#put at 56 20 30 text 11 0
#put at 56 21 30 text 11 0

:y
#bgplay 00
#zap up
#zap down
#zap left
#zap right
#zap space
#z

'down

#put at 56 24 31 text 11 0
#put at 56 25 31 text 11 0
#put n 31 text 11 0
#color i 11 0

:v
#give array
#y
'space
#play s86
#if array is 6 if obj1 v
#zap up
#zap down
#zap left
#zap right
#zap space
#run :wipe
#shove player at 11 15
#pset i char 232
#shove i at 13 15
#color i 3 0
$
/i#step msgtxt i
#change black solid empty
#restore touch
#end
'left
#clear obj1
#x
'right
#if array is 6 set obj1
:x
#if array is 6 run :deci
#u

:pg1
#write by 1 0 15 0                      Welcome!                    
#write by 1 1 7 0                                                   
#write by 1 2 7 0   This is the first in a series of pages that     
#write by 1 3 7 0 demonstrate bottom-of-screen text boxes with a    
#write by 1 4 7 0 visual-novel style presentation. Press DOWN.      
#write by 40 4 11 0 DOWN
#end
:pg2
#write by 1 0 7 0   Using the @INPUT object and capturing UP, DOWN, 
#write by 13 0 14 0 @INPUT
#write by 41 0 11 0 UP
#write by 45 0 11 0 DOWN
#write by 1 1 7 0 and SPACE inputs, the main moving parts are as    
#write by 5 1 11 0 SPACE
#write by 1 2 7 0 follows:                                          
#write by 1 3 7 0                                                   
#write by 1 4 7 0                                                   
#end
:pg3
#write by 1 0 7 0        * ARRAY, to check which page we're on.     
#write by 10 0 5 0 ARRAY
#write by 1 1 7 0        * UP and DOWN to manipulate ARRAY.         
#write by 10 1 11 0 UP
#write by 17 1 11 0 DOWN
#write by 36 1 5 0 ARRAY
#write by 1 2 7 0        * SPACE to end session.                    
#write by 10 2 11 0 SPACE
#write by 1 3 7 0        * Some method of constraining the player.  
#write by 1 4 7 0        * Visual indicator of key response.        
#end
:pg4
#write by 1 0 7 0   While this method is easier to edit, the impact 
#write by 1 1 7 0 is not as refined as the "smooth scrolling" method
#write by 27 1 11 0 smooth scrolling
#write by 1 2 7 0 included in this unit. Pagination is rigid, which 
#write by 1 3 7 0 can lead to awkward gaps in the text.             
#write by 1 4 7 0                                                   
#end
:pg5
#write by 1 0 7 0   Still, if you don't want to set up something too
#write by 1 1 7 0 complicated, this can be a great way to present a 
#write by 1 2 7 0 visual novel, or an animated cutscene, without    
#write by 1 3 7 0 resorting to single lines of text or opening a    
#write by 1 4 7 0 large, obtrusive text window.                     
#end
:pg6
#write by 1 0 15 0 Narrator:                                         
#write by 1 1 7 0   You can present the text in a variety of ways,  
#write by 1 2 7 0  including branching paths in response to choice: 
#write by 1 3 8 0           [LEFT/RIGHT to select, SPACE to confirm]
:deci
#write by 1 4 4 0       END DIALOGUE            BONUS SECTION       
#if obj1 is 0 write by 5 4 12 0 * END DIALOGUE *
#if obj1 is 1 write by 29 4 12 0 * BONUS SECTION *
#end

:pg7
'                 xwvutsrqponmlkjihgfedcbaXXabcdefghijklmnopqrstuvwx
#write by 1 0 15 0        Welcome to the BONUS SECTION, wheee!       
#write by 1 1 7 0                                                   
#write by 1 2 7 0   You can use this branching logic to show extra  
#write by 1 3 7 0    dialogue, or give the player agency over the   
#write by 1 4 7 0                outcome of the story.              
#end
:pg8
'                 xwvutsrqponmlkjihgfedcbaXXabcdefghijklmnopqrstuvwx
#write by 1 0 7 0     Be sure to take advantage of the fact that    
#write by 1 1 7 0  the game is still running while this text box is 
#write by 1 2 7 0   open. Text can  jitter,  flicker, and glow, or  
#write by 1 3 7 0     anything you think up that might bring the    
#write by 1 4 7 0           text to life; it's up to you!           
#end

:effect
#if rnd write by 18 2 7 0  jitter, 
#else if rnd write by 18 2 7 0 jitter,  
#else write by 18 2 7 0   jitter,
#if rnd if rnd write by 28 2 15 0 flicker
#else write by 28 2 8 0 flicker
#take obj6 35 give obj6
#if obj6 below 8 write by 41 2 8 0 glow
#if obj6 is 10 write by 41 2 6 0 glow
#if obj6 is 12 write by 41 2 14 0 glow
#if obj6 is 14 write by 41 2 15 0 glow
#if obj6 is 20 write by 39 2 15 0 d glow, 
#and write by 41 1 15 0 xt b
#and write by 41 2 0 7 glow
#and write by 41 3 15 0 ng t
#if obj6 is 26 write by 39 2 7 0 d glow, 
#and write by 41 1 7 0 xt b
#and write by 41 2 15 0 glow
#and write by 41 3 7 0 ng t
#if obj6 is 32 write by 41 2 14 0 glow
#if obj6 is 34 write by 41 2 6 0 glow
#if rnd if rnd set obj4 random 9 15
#take obj5 give obj5 3
#if obj5 is 3 put by 19 4 text obj4 0
#if obj5 is 3 put by 22 4 text 7 0
#if obj5 is 2 put by 20 4 text obj4 0
#if obj5 is 2 put by 19 4 text 7 0
#if obj5 is 1 put by 21 4 text obj4 0
#if obj5 is 1 put by 20 4 text 7 0
#if obj5 is 0 put by 22 4 text obj4 0
#if obj5 is 0 put by 21 4 text 7 0
#end

:wipe
#write by 1 0 7 0                                                    
#write by 0 1 7 0                                                     
#write by 1 2 7 0                                                   
#write by 1 3 7 0                                                   
#write by 0 4 7 0                                                     
#write by 0 5 7 0                                                     
#end